{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/app/app.tsx","webpack:///./src/app/walletConnectUI.tsx","webpack:///./src/main.tsx","webpack:///./src/services/WalletConnectRemixClient.ts","webpack:///./src/services/constant.ts","webpack:///./src/css/app.css?d254","webpack:///ignored|/home/circleci/remix-project/node_modules/@stablelib/random/lib/source|crypto"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport '../css/app.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport type {EthereumClient} from '@web3modal/ethereum'\nimport {WalletConnectRemixClient} from '../services/WalletConnectRemixClient'\nimport {WalletConnectUI} from './walletConnectUI'\n\nconst remix = new WalletConnectRemixClient()\n\nfunction App() {\n  const [ethereumClient, setEthereumClient] = useState<EthereumClient>(null)\n  const [wagmiConfig, setWagmiConfig] = useState(null)\n  const [theme, setTheme] = useState<string>('dark')\n\n  useEffect(() => {\n    ;(async () => {\n      await remix.initClient()\n      remix.internalEvents.on('themeChanged', (theme: string) => {\n        setTheme(theme)\n      })\n\n      setWagmiConfig(remix.wagmiConfig)\n      setEthereumClient(remix.ethereumClient)\n    })()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h4 className=\"mt-1\">WalletConnect</h4>\n      {ethereumClient && wagmiConfig && <WalletConnectUI wagmiConfig={wagmiConfig} ethereumClient={ethereumClient} theme={theme} />}\n    </div>\n  )\n}\n\nexport default App\n","import {Web3Button, Web3Modal} from '@web3modal/react'\nimport {WagmiConfig} from 'wagmi'\nimport {PROJECT_ID} from '../services/constant'\n\nexport function WalletConnectUI({ethereumClient, wagmiConfig, theme}) {\n  return (\n    <div>\n      <div style={{display: 'inline-block'}}>\n        <WagmiConfig config={wagmiConfig}>\n          <Web3Button label=\"Connect to a wallet\" />\n        </WagmiConfig>\n      </div>\n      <Web3Modal projectId={PROJECT_ID} ethereumClient={ethereumClient} themeMode={theme} />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import {PluginClient} from '@remixproject/plugin'\nimport {createClient} from '@remixproject/plugin-webview'\nimport {w3mConnectors, w3mProvider} from '@web3modal/ethereum'\nimport {createConfig, configureChains} from 'wagmi'\nimport {\n  arbitrum,\n  arbitrumGoerli,\n  mainnet,\n  polygon,\n  polygonMumbai,\n  optimism,\n  optimismGoerli,\n  Chain,\n  goerli,\n  sepolia\n} from 'viem/chains'\nimport {EthereumClient} from '@web3modal/ethereum'\nimport EventManager from 'events'\nimport {PROJECT_ID} from './constant'\n\nexport class WalletConnectRemixClient extends PluginClient {\n  wagmiConfig\n  ethereumClient: EthereumClient\n  chains: Chain[]\n  currentChain: number\n  internalEvents: EventManager\n\n  constructor() {\n    super()\n    createClient(this)\n    this.internalEvents = new EventManager()\n    this.methods = ['sendAsync', 'init', 'deactivate']\n    this.onload()\n  }\n\n  onActivation() {\n    this.subscribeToEvents()\n    this.call('theme', 'currentTheme').then((theme: any) => {\n      this.internalEvents.emit('themeChanged', theme.quality.toLowerCase())\n    })\n  }\n\n  init() {\n    console.log('initializing walletconnect plugin...')\n  }\n\n  async initClient() {\n    try {\n      this.chains = [\n        mainnet,\n        arbitrum,\n        arbitrumGoerli,\n        polygon,\n        polygonMumbai,\n        optimism,\n        optimismGoerli,\n        goerli,\n        sepolia\n      ]\n      const {publicClient} = configureChains(this.chains, [\n        w3mProvider({projectId: PROJECT_ID})\n      ])\n\n      this.wagmiConfig = createConfig({\n        autoConnect: false,\n        connectors: w3mConnectors({projectId: PROJECT_ID, chains: this.chains}),\n        publicClient\n      })\n      this.ethereumClient = new EthereumClient(this.wagmiConfig, this.chains)\n    } catch (e) {\n      return console.error('Could not get a wallet connection', e)\n    }\n  }\n\n  subscribeToEvents() {\n    this.wagmiConfig.subscribe((event) => {\n      if (event.status === 'connected') {\n        this.emit('accountsChanged', [event.data.account])\n        if (this.currentChain !== event.data.chain.id) {\n          this.currentChain = event.data.chain.id\n          this.emit('chainChanged', event.data.chain.id)\n        }\n      } else if (event.status === 'disconnected') {\n        this.emit('accountsChanged', [])\n        this.emit('chainChanged', 0)\n        this.currentChain = 0\n      }\n    })\n    this.on('theme', 'themeChanged', (theme: any) => {\n      this.internalEvents.emit('themeChanged', theme.quality)\n    })\n  }\n\n  async sendAsync(data: {method: string; params: string; id: string}) {\n    if (this.wagmiConfig.status === 'connected') {\n      if (data.method === 'eth_accounts') {\n        return {\n          jsonrpc: '2.0',\n          result: [this.wagmiConfig.data.account],\n          id: data.id\n        }\n      } else {\n        const provider = await this.wagmiConfig.connector.getProvider({\n          chainId: this.wagmiConfig.data.chain.id\n        })\n\n        if (provider.isMetaMask) {\n          return new Promise((resolve) => {\n            provider.sendAsync(data, (err, response) => {\n              if (err) {\n                console.error(err)\n                return resolve({jsonrpc: '2.0', result: [], id: data.id})\n              }\n              return resolve(response)\n            })\n          })\n        } else {\n          const message = await provider.request(data)\n\n          return {jsonrpc: '2.0', result: message, id: data.id}\n        }\n      }\n    } else {\n      console.error(\n        `Cannot make ${data.method} request. Remix client is not connected to walletconnect client`\n      )\n      return {jsonrpc: '2.0', result: [], id: data.id}\n    }\n  }\n\n  async deactivate() {\n    console.log('deactivating walletconnect plugin...')\n    await this.ethereumClient.disconnect()\n  }\n}\n","// @ts-ignore\nexport const PROJECT_ID = WALLET_CONNECT_PROJECT_ID","// extracted by mini-css-extract-plugin\nexport {};","/* (ignored) */"],"names":["remix","WalletConnectRemixClient","App","useState","ethereumClient","setEthereumClient","wagmiConfig","setWagmiConfig","theme","setTheme","useEffect","initClient","internalEvents","on","WalletConnectUI","display","PROJECT_ID","ReactDOM","render","document","getElementById","createClient","EventManager","methods","onload","subscribeToEvents","call","then","emit","quality","toLowerCase","console","log","chains","mainnet","arbitrum","arbitrumGoerli","polygon","polygonMumbai","optimism","optimismGoerli","goerli","sepolia","configureChains","w3mProvider","projectId","publicClient","createConfig","autoConnect","connectors","w3mConnectors","EthereumClient","error","subscribe","event","status","data","account","currentChain","chain","id","method","jsonrpc","result","connector","getProvider","chainId","provider","isMetaMask","Promise","resolve","sendAsync","err","response","request","message","disconnect","PluginClient","WALLET_CONNECT_PROJECT_ID"],"sourceRoot":""}