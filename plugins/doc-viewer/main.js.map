{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAkC;AAAA;AAAA;AAElC,IAAMA,MAAM,GAAG,IAAIC,oBAAS,EAAE;AAEf,SAASC,GAAG,GAAG;EAC5B,gBAAgC,IAAAC,eAAQ,EAAC,EAAE,CAAC;IAAA;IAArCC,QAAQ;IAAEC,WAAW;EAC5B,IAAAC,gBAAS,EAAC,YAAM;IACdN,MAAM,CAACO,YAAY,CAACC,EAAE,CAAC,eAAe,EAAE,UAACC,YAAoB,EAAK;MAChEJ,WAAW,CAACI,YAAY,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,IAAMC,IAAI,GAAG,SAAPA,IAAI,GAAS;IACjB,IAAI,CAACV,MAAM,CAACW,MAAM,EAAE;IACpBX,MAAM,CAACY,IAAI,CAAC,aAAa,EAAE,MAAM,EAASZ,MAAM,CAACW,MAAM,CAAC;EAC1D,CAAC;EACD,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,SAAS;MAAA,wBACtB;QAAQ,SAAS,EAAC,wBAAwB;QAAC,OAAO,EAAED,IAAK;QAAA;MAAA,EAAc,eACvE,qBAAC,yBAAa;QAAC,QAAQ,EAAEN,QAAS;QAAC,aAAa,EAAE,CAACS,qBAAS;MAAE,EAAG;IAAA;EAC7D,EACL;AAEP;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAAiC;AAAA;AAAA,IAEpBZ,SAAS;EAAA;EAAA;EAIpB,qBAAc;IAAA;IAAA;IACZ;IAAO;IAAA;IAAA;IACP,MAAKM,YAAY,GAAG,IAAIO,kBAAY,EAAE;IACtC,MAAKC,OAAO,GAAG,CAAC,UAAU,CAAC;IAC3B,IAAAC,2BAAY,iDAAM;IAClB,MAAKL,MAAM,GAAG,EAAE;IAChB,MAAKM,MAAM,EAAE;IAAA;EACf;EAAC;IAAA;IAAA;MAAA,6FAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,IAAI,CAACN,MAAM;kBAAA;kBAAA;gBAAA;gBAAA,iCAASO,aAAa,CAAC,IAAI,CAACC,SAAS,CAAC;cAAA;gBAAA;gBAAA,OAC/B,IAAI,CAACP,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE,IAAI,CAACD,MAAM,CAAC;cAAA;gBAAlEP,QAAQ;gBACd,IAAI,CAACG,YAAY,CAACa,IAAI,CAAC,eAAe,EAAEhB,QAAQ,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAClD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,8FAED,kBAAeiB,IAAc;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC3B,IAAI,CAACV,MAAM,GAAGU,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAACC,OAAO,EAAE;gBACd,IAAI,CAACH,SAAS,GAAGI,WAAW,6FAAC;kBAAA;oBAAA;sBAAA;wBAAA;0BAC3B,MAAI,CAACD,OAAO,EAAE;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CACf,IAAE,GAAG,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACR;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAzB4BE,oBAAY;AAAA;;;;;;;;;;ACJ3C;AACA;AACA;AAA2B;AAE3B,IAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AAEjD,IAAIF,SAAS,EAAE;EACb,IAAAG,kBAAU,EAACH,SAAS,CAAC,CAACI,MAAM,eAAC,qBAAC,iBAAK,CAAC,UAAU;IAAA,uBAC5C,qBAAC,eAAG;EAAG,EACU,CAAC;AACtB","sources":["webpack:///./src/app/App.tsx","webpack:///./src/app/docviewer.ts","webpack:///./src/main.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {DocViewer} from './docviewer'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst client = new DocViewer()\n\nexport default function App() {\n  const [contents, setContents] = useState('')\n  useEffect(() => {\n    client.eventEmitter.on('contentsReady', (fileContents: string) => {\n      setContents(fileContents)\n    })\n  }, [])\n  const edit = () => {\n    if (!client.mdFile) return\n    client.call('fileManager', 'open' as any, client.mdFile)\n  }\n  return (\n    <>\n      <div className=\"m-5 p-2\">\n        <button className=\"btn btn-secondary mb-2\" onClick={edit}>EDIT</button>\n        <ReactMarkdown children={contents} remarkPlugins={[remarkGfm]} />\n      </div>\n    </>\n  )\n}\n","import { PluginClient } from '@remixproject/plugin'\nimport { createClient } from '@remixproject/plugin-webview'\nimport EventEmitter from 'events'\n\nexport class DocViewer extends PluginClient {\n  mdFile: string\n  eventEmitter: EventEmitter\n  refreshId: any\n  constructor() {\n    super()\n    this.eventEmitter = new EventEmitter()\n    this.methods = ['viewDocs']\n    createClient(this)\n    this.mdFile = ''\n    this.onload()\n  }\n\n  private async refresh() {\n    if (!this.mdFile) return clearInterval(this.refreshId)\n    const contents = await this.call('fileManager', 'readFile', this.mdFile)\n    this.eventEmitter.emit('contentsReady', contents)\n  }\n\n  async viewDocs(docs: string[]) {\n    this.mdFile = docs[0]\n    this.refresh()\n    this.refreshId = setInterval(async () => {\n      this.refresh()\n    }, 500)\n  }\n}","import React from 'react'\nimport { createRoot } from 'react-dom/client';\nimport App from './app/App'\n\nconst container = document.getElementById('root');\n\nif (container) {\n  createRoot(container).render(<React.StrictMode>\n    <App />\n  </React.StrictMode>);\n}\n"],"names":["client","DocViewer","App","useState","contents","setContents","useEffect","eventEmitter","on","fileContents","edit","mdFile","call","remarkGfm","EventEmitter","methods","createClient","onload","clearInterval","refreshId","emit","docs","refresh","setInterval","PluginClient","container","document","getElementById","createRoot","render"],"sourceRoot":""}