{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/app/app.tsx","webpack:///./src/app/services/circomPluginClient.ts","webpack:///./src/main.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport { CircomPluginClient } from './services/circomPluginClient'\n\nfunction App() {\n\n  useEffect(() => {\n    new CircomPluginClient()\n  }, [])\n  \n  return (\n    <div className=\"App\">\n    </div>\n  )\n}\n\nexport default App","import {PluginClient} from '@remixproject/plugin'\nimport {createClient} from '@remixproject/plugin-webview'\nimport EventManager from 'events'\nimport pathModule from 'path'\nimport {parse} from 'circom_wasm'\n\nexport class CircomPluginClient extends PluginClient {\n  public internalEvents: EventManager\n\n  constructor() {\n    super()\n    createClient(this)\n    this.internalEvents = new EventManager()\n    this.methods = ['init', 'parse']\n    this.onload()\n  }\n\n  init(): void {\n    console.log('initializing circom plugin...')\n  }\n\n  onActivation(): void {\n    // @ts-ignore\n    this.on('editor', 'contentChanged', (path: string, fileContent) => {\n      if (path.endsWith('.circom')) {\n        this.parse(path, fileContent)\n      }\n    })\n  }\n\n  async parse(path: string, fileContent: string): Promise<void> {\n    let buildFiles = {\n      [path]: fileContent\n    }\n\n    buildFiles = await this.resolveDependencies(path, fileContent, buildFiles)\n    const parsedOutput = parse(path, buildFiles)\n\n    try {\n      const result = JSON.parse(parsedOutput)\n\n      if (result.length === 0) {\n        // @ts-ignore\n        await this.call('editor', 'clearErrorMarkers', [path])\n      } else {\n        const markers = []\n\n        for (const report of result) {\n          for (const label in report.labels) {\n            if (report.labels[label].file_id === '0') {\n              // @ts-ignore\n              const startPosition: {lineNumber: number; column: number} =\n                await this.call(\n                  'editor',\n                  // @ts-ignore\n                  'getPositionAt',\n                  report.labels[label].range.start\n                )\n              // @ts-ignore\n              const endPosition: {lineNumber: number; column: number} =\n                await this.call(\n                  'editor',\n                  // @ts-ignore\n                  'getPositionAt',\n                  report.labels[label].range.end\n                )\n\n              markers.push({\n                message: report.message,\n                severity: report.type.toLowerCase(),\n                position: {\n                  start: {\n                    line: startPosition.lineNumber,\n                    column: startPosition.column\n                  },\n                  end: {\n                    line: endPosition.lineNumber,\n                    column: endPosition.column\n                  }\n                },\n                file: path\n              })\n            }\n          }\n        }\n\n        if (markers.length > 0) {\n          // @ts-ignore\n          await this.call('editor', 'addErrorMarker', markers)\n        } else {\n          // @ts-ignore\n          await this.call('editor', 'clearErrorMarkers', [path])\n        }\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  async resolveDependencies(\n    filePath: string,\n    fileContent: string,\n    output = {},\n    depPath: string = '',\n    blackPath: string[] = []\n  ): Promise<Record<string, string>> {\n    // extract all includes\n    const includes = (fileContent.match(/include ['\"].*['\"]/g) || []).map(\n      (include) => include.replace(/include ['\"]/g, '').replace(/['\"]/g, '')\n    )\n\n    await Promise.all(\n      includes.map(async (include) => {\n        // fix for endless recursive includes\n        if (blackPath.includes(include)) return\n        let dependencyContent = ''\n        let path = include\n        // @ts-ignore\n        const pathExists = await this.call('fileManager', 'exists', path)\n\n        if (pathExists) {\n          // fetch file content if include import (path) exists within same level as current file opened in editor\n          dependencyContent = await this.call('fileManager', 'readFile', path)\n        } else {\n          // if include import (path) does not exist, try to construct relative path using the original file path (current file opened in editor)\n          let relativePath = pathModule.resolve(\n            filePath.slice(0, filePath.lastIndexOf('/')),\n            include\n          )\n          if (relativePath.indexOf('/') === 0)\n            relativePath = relativePath.slice(1)\n          const relativePathExists = await this.call(\n            'fileManager',\n            // @ts-ignore\n            'exists',\n            relativePath\n          )\n\n          if (relativePathExists) {\n            // fetch file content if include import exists as a relative path\n            dependencyContent = await this.call(\n              'fileManager',\n              'readFile',\n              relativePath\n            )\n          } else {\n            if (depPath) {\n              // if depPath is provided, try to resolve include import from './deps' folder in remix\n              path = pathModule.resolve(\n                depPath.slice(0, depPath.lastIndexOf('/')),\n                include\n              )\n              if (path.indexOf('/') === 0) path = path.slice(1)\n              dependencyContent = await this.call(\n                'contentImport',\n                'resolveAndSave',\n                path,\n                null\n              )\n            } else {\n              if (include.startsWith('circomlib')) {\n                // try to resolve include import from github if it is a circomlib dependency\n                const splitInclude = include.split('/')\n                const version = splitInclude[1].match(/v[0-9]+.[0-9]+.[0-9]+/g)\n\n                if (version && version[0]) {\n                  path = `https://raw.githubusercontent.com/iden3/circomlib/${\n                    version[0]\n                  }/circuits/${splitInclude.slice(2).join('/')}`\n                  dependencyContent = await this.call(\n                    'contentImport',\n                    'resolveAndSave',\n                    path,\n                    null\n                  )\n                } else {\n                  path = `https://raw.githubusercontent.com/iden3/circomlib/master/circuits/${splitInclude\n                    .slice(1)\n                    .join('/')}`\n                  dependencyContent = await this.call(\n                    'contentImport',\n                    'resolveAndSave',\n                    path,\n                    null\n                  )\n                }\n              } else {\n                // If all import cases are not true, use the default import to try fetching from node_modules and unpkg\n                dependencyContent = await this.call(\n                  'contentImport',\n                  'resolveAndSave',\n                  path,\n                  null\n                )\n              }\n            }\n          }\n        }\n        // extract all includes from the dependency content\n        const dependencyIncludes = (\n          dependencyContent.match(/include ['\"].*['\"]/g) || []\n        ).map((include) =>\n          include.replace(/include ['\"]/g, '').replace(/['\"]/g, '')\n        )\n\n        blackPath.push(include)\n        // recursively resolve all dependencies of the dependency\n        if (dependencyIncludes.length > 0) {\n          await this.resolveDependencies(\n            filePath,\n            dependencyContent,\n            output,\n            path,\n            blackPath\n          )\n          output[include] = dependencyContent\n        } else {\n          output[include] = dependencyContent\n        }\n      })\n    )\n    return output\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/app'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"names":["App","useEffect","CircomPluginClient","createClient","internalEvents","EventManager","methods","onload","console","log","on","path","fileContent","endsWith","parse","buildFiles","resolveDependencies","parsedOutput","result","JSON","length","call","markers","report","labels","label","file_id","range","start","startPosition","end","endPosition","push","message","severity","type","toLowerCase","position","line","lineNumber","column","file","filePath","output","depPath","blackPath","includes","match","map","include","replace","Promise","all","dependencyContent","pathExists","relativePath","pathModule","resolve","slice","lastIndexOf","indexOf","relativePathExists","startsWith","splitInclude","split","version","join","dependencyIncludes","PluginClient","ReactDOM","render","document","getElementById"],"sourceRoot":""}