{"version":3,"file":"31.0.56.0.1729697541829.js","mappings":"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","sources":["webpack:///../../node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.44.0(3e047efd345ff102c8c61b5398fb30845aaac166)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["bounded","text","identifierStart","identifierContinue","identifier","keywords","namedLiterals","nonCommentWs","numericLiteral","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"sourceRoot":""}