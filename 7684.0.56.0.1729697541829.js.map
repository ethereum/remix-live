{"version":3,"file":"7684.0.56.0.1729697541829.js","mappings":"qRAAA,mpH","sources":["webpack:///../../libs/remix-ws-templates/src/templates/ozerc20/tests/MyToken_mintable_test.sol"],"sourcesContent":["export default \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"remix_tests.sol\\\";\\nimport \\\"remix_accounts.sol\\\";\\nimport \\\"../contracts/MyToken.sol\\\";\\n\\ncontract MyTokenTest is MyToken {\\n\\n    address acc0 = TestsAccounts.getAccount(0);\\n    address acc1;\\n    address acc2;\\n    address acc3;\\n    address acc4;\\n\\n    // acc0 will be set as initial owner\\n    constructor() MyToken(acc0) {}\\n\\n    function beforeAll() public {\\n        acc1 = TestsAccounts.getAccount(1);\\n        acc2 = TestsAccounts.getAccount(2);\\n        acc3 = TestsAccounts.getAccount(3);\\n        acc4 = TestsAccounts.getAccount(4);\\n    }\\n\\n    function testTokenInitialValues() public {\\n        Assert.equal(name(), \\\"MyToken\\\", \\\"token name did not match\\\");\\n        Assert.equal(symbol(), \\\"MTK\\\", \\\"token symbol did not match\\\");\\n        Assert.equal(decimals(), 18, \\\"token decimals did not match\\\");\\n        Assert.equal(totalSupply(), 0, \\\"token supply should be zero\\\");\\n    }\\n\\n    function testTokenMinting() public {\\n        Assert.equal(balanceOf(acc0), 0, \\\"token balance should be zero initially\\\");\\n        mint(acc0, 10000);\\n        Assert.equal(balanceOf(acc0), 10000, \\\"token balance did not match\\\");\\n    }\\n\\n    function testTotalSupply() public {\\n        Assert.equal(totalSupply(), 10000, \\\"total supply did not match\\\");\\n    }\\n\\n    /// #sender: account-1\\n    function failTestTokenMintingWithWrongOwner() public {\\n        Assert.equal(balanceOf(acc0), 0, \\\"token balance should be zero initially\\\");\\n        mint(acc0, 10000);\\n        Assert.equal(balanceOf(acc0), 10000, \\\"token balance did not match\\\");\\n    }\\n\\n    function failTestTokenMintingForZeroAddress() public {\\n        mint(address(0), 10000);\\n    }\\n\\n    function testTokenTransfer() public {\\n        Assert.equal(balanceOf(acc1), 0, \\\"token balance should be zero initially\\\");\\n        transfer(acc1, 500);\\n        Assert.equal(balanceOf(acc0), 9500, \\\"token balance did not match\\\");\\n        Assert.equal(balanceOf(acc1), 500, \\\"token balance did not match\\\");\\n    }\\n\\n    /// #sender: account-1\\n    function testTokenTransferToOtherAddress() public {\\n        Assert.equal(balanceOf(acc1), 500, \\\"acc1 token balance did not match\\\");\\n        transfer(acc2, 100);\\n        Assert.equal(balanceOf(acc1), 400, \\\"acc1 token balance did not match\\\");\\n        Assert.equal(balanceOf(acc2), 100, \\\"acc2 token balance did not match\\\");\\n    }\\n\\n    function failTestTokenTransferToZeroAddress() public {\\n        transfer(address(0), 100);\\n    }\\n\\n    /// #sender: account-2\\n    function failTestTokenTransferMoreThanBalance() public {\\n        transfer(acc3, 110);\\n    }\\n\\n    function testTokenApprove() public {\\n        Assert.equal(allowance(acc0, acc3), 0, \\\"token allowance should be zero initially\\\");\\n        approve(acc3, 500);\\n        Assert.equal(allowance(acc0, acc3), 500, \\\"token allowance did not match\\\");\\n    }\\n\\n    function failTestTokenApproveForZeroSpenderAddress() public {\\n        approve(address(0), 500);\\n    }\\n\\n    /// #sender: account-3\\n    function testTokenTransferfrom() public {\\n        Assert.equal(allowance(acc0, acc3), 500, \\\"token allowance did not match\\\");\\n        transferFrom(acc0, acc4, 400);\\n        Assert.equal(balanceOf(acc4), 400, \\\"acc4 token balance did not match\\\");\\n        Assert.equal(allowance(acc0, acc3), 100, \\\"token allowance did not match\\\");\\n    }\\n\\n    /// #sender: account-3\\n    function failTestTokenTransferfromForMoreThanAllowance() public {\\n        transferFrom(acc0, acc4, 110);\\n    }\\n\\n    /// #sender: account-3\\n    function failTestTokenTransferfromForZeroToAddress() public {\\n        transferFrom(acc0, address(0), 100);\\n    }\\n}\\n\\n\";"],"names":[],"sourceRoot":""}