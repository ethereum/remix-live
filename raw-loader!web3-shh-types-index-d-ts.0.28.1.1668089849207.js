(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[96],{

/***/ 3493:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.d.ts\n * @author Josh Stevens <joshstevens19@hotmail.co.uk>, Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\nimport * as net from 'net';\nimport { BatchRequest, provider, Providers, Extension } from 'web3-core';\nimport { Network } from 'web3-net';\n\nexport class Shh {\n    constructor();\n    constructor(provider: provider);\n    constructor(provider: provider, net: net.Socket);\n\n    readonly givenProvider: any;\n    static readonly givenProvider: any;\n    static readonly providers: Providers;\n    readonly currentProvider: provider;\n    BatchRequest: new () => BatchRequest;\n\n    setProvider(provider: provider): boolean;\n\n    extend(extension: Extension): any;\n\n    net: Network;\n\n    getVersion(\n        callback?: (error: Error, version: string) => void\n    ): Promise<string>;\n\n    getInfo(callback?: (error: Error, info: Info) => void): Promise<Info>;\n\n    setMaxMessageSize(\n        size: number,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    setMinPoW(\n        pow: number,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    markTrustedPeer(\n        enode: string,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    newKeyPair(callback?: (error: Error, key: string) => void): Promise<string>;\n\n    addPrivateKey(\n        privateKey: string,\n        callback?: (error: Error, privateKey: string) => void\n    ): Promise<string>;\n\n    deleteKeyPair(\n        id: string,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    hasKeyPair(\n        id: string,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    getPublicKey(\n        id: string,\n        callback?: (error: Error, publicKey: string) => void\n    ): Promise<string>;\n\n    getPrivateKey(\n        id: string,\n        callback?: (error: Error, privateKey: string) => void\n    ): Promise<string>;\n\n    newSymKey(callback?: (error: Error, key: string) => void): Promise<string>;\n\n    addSymKey(\n        symKey: string,\n        callback?: (error: Error, key: string) => void\n    ): Promise<string>;\n\n    generateSymKeyFromPassword(\n        password: string,\n        callback?: (error: Error, key: string) => void\n    ): Promise<string>;\n\n    hasSymKey(\n        id: string,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    getSymKey(\n        id: string,\n        callback?: (error: Error, key: string) => void\n    ): Promise<string>;\n\n    deleteSymKey(\n        id: string,\n        callback?: (error: Error, result: boolean) => void\n    ): Promise<boolean>;\n\n    post(\n        object: PostWithSymKey | PostWithPubKey,\n        callback?: (error: Error, result: string) => void\n    ): Promise<string>;\n\n    subscribe(\n        string: 'messages',\n        options: SubscriptionOptions,\n        callback?: (\n            error: Error,\n            message: Notification,\n            subscription: any\n        ) => void\n    ): Subscribe;\n\n    newMessageFilter(\n        options?: SubscriptionOptions,\n        callback?: (error: Error, result: string) => void\n    ): Promise<string>;\n\n    deleteMessageFilter(\n        id: string,\n        callback?: (error: Error, result: string) => void\n    ): Promise<boolean>;\n\n    getFilterMessages(\n        id: string,\n        callback?: (error: Error, result: string) => void\n    ): Promise<Notification[]>;\n}\n\nexport interface Info {\n    messages: number;\n    maxMessageSize: number;\n    memory: number;\n    minPow: number;\n}\n\nexport interface PostBase {\n    sig?: string;\n    ttl: number;\n    topic: string;\n    payload: string;\n    padding?: number;\n    powTime?: number;\n    powTarget?: number;\n    targetPeer?: number;\n}\n\nexport interface PostWithSymKey extends PostBase {\n    symKeyID: string;\n}\n\nexport interface PostWithPubKey extends PostBase {\n    pubKey: string;\n}\n\nexport interface SubscriptionOptions {\n    symKeyID?: string;\n    privateKeyID?: string;\n    sig?: string;\n    topics?: string[];\n    minPow?: number;\n    allowP2P?: boolean;\n    ttl?: number;\n}\n\nexport interface Notification {\n    hash: string;\n    sig?: string;\n    recipientPublicKey?: string;\n    timestamp: string;\n    ttl: number;\n    topic: string;\n    payload: string;\n    padding: number;\n    pow: number;\n}\n\nexport interface Subscribe {\n    on(type: 'data', handler: (data: Notification) => void): void;\n\n    on(type: 'error', handler: (data: Error) => void): void;\n}\n");

/***/ })

}]);
//# sourceMappingURL=raw-loader!web3-shh-types-index-d-ts.0.28.1.1668089849207.js.map
//# sourceMappingURL=raw-loader!web3-shh-types-index-d-ts.0.28.1.1668089849207.js.map